pipeline {
    agent any

    environment { 
        GIT_REPO   = 'https://github.com/YongSinh/agritech-iot.git'
        APP_ENV    = 'uat'
        APP_VERSION = '1.0.0'
    }

    parameters {
        choice(name: 'BRANCH', choices: ['main', 'uat', 'dev'], description: 'Please select branch')
        choice(name: 'PROJECT', choices: ['agritech-iot', 'logs-service', 'api-gateway'], description: 'Please select project')
        choice(name: 'JDK', choices: ['jdk-17.0.12', 'graalvm-jdk-21', 'graalvm-jdk-24'], description: 'Please select JDK version')
    }

    tools {
        jdk "${params.JDK}"
        maven 'Maven 3.9.5'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Validate Tools') {
            steps {
                script {
                    def javaHome = tool name: "${params.JDK}", type: 'jdk'
                    def javaPath = "${javaHome}/bin/java"
                    
                    if (!fileExists(javaPath)) {
                        error("‚ùå JDK not found or incompatible at: ${javaPath}")
                    }
                    
                    def javaVersion = sh(script: "${javaPath} -version 2>&1", returnStdout: true).trim()
                    echo "‚úÖ Using Java: ${javaVersion}"
                }
            }
        }
        stage('Checkout Code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH}"]],
                        extensions: [
                            [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: "${params.PROJECT}"]]]
                        ],
                        userRemoteConfigs: [[
                            url: "${env.GIT_REPO}",
                            credentialsId: 'jenkins_ci'
                        ]]
                    ])
                }
            }
        }

        stage('Build Project') {
            steps {
               sh """
                    cd "${params.PROJECT}"
                    echo "üì¶ Building project: ${params.PROJECT}"
                    mvn clean install -DskipTests=true
                """
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build completed successfully for project: ${params.PROJECT}"
        }
        failure {
            echo "‚ùå Build failed for project: ${params.PROJECT}. Check the logs for details."
        }
    }
}
